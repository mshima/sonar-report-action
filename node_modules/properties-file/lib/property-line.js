"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyLine = void 0;
/**
 * Object representing a line from the content of .properties file.
 */
var PropertyLine = /** @class */ (function () {
    /**
     * Create a new line object.
     *
     * @param line - The raw content of a line.
     * @param isMultiline - Is the line spreading on multiple lines?
     */
    function PropertyLine(line, isMultiline) {
        /** True if the line continues, otherwise false. */
        this.continues = false;
        /** True if the line is blank, otherwise false. */
        this.isBlank = false;
        /** True if the line is a comment, otherwise false. */
        this.isComment = false;
        this.content = line.trimStart();
        this.isMultiline = isMultiline;
        if (this.content.length === 0) {
            // Line is blank.
            this.isBlank = true;
        }
        else {
            if (!this.isMultiline) {
                // Line is a comment.
                this.isComment = !!/^[!#]/.test(this.content);
            }
            if (!this.isComment) {
                // Otherwise, check if the line continues on the next line.
                var backslashMatch = this.content.match(/(?<backslashes>\\+)$/);
                if (backslashMatch === null || backslashMatch === void 0 ? void 0 : backslashMatch.groups) {
                    // If the number of backslashes is odd, the line continues, otherwise it doesn't.
                    this.continues = !!(backslashMatch.groups.backslashes.length % 2);
                    if (this.continues) {
                        // Remove the trailing slash so that we can concatenate the line with the next one.
                        this.content = this.content.slice(0, -1);
                    }
                }
            }
        }
    }
    return PropertyLine;
}());
exports.PropertyLine = PropertyLine;
